from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.filters import Text
from aiogram.utils.markdown import hbold
from aiogram.dispatcher import FSMContext

from tgbot.misc.states import *
from tgbot.database import db_connector
from tgbot.keyboards import reply
from tgbot.keyboards import inline
from tgbot.config import load_config
from create_bot import bot



config = load_config(".env")
admin_group_id = config.misc.admin_group


def mute(message: Message):
    pass


async def user_start(message: Message):
    text_rus = [
        '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –∫–æ–º–ø–∞–Ω–∏—é <b>–ú–ö–ë</b>! –ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å',
        '–í–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
    ]
    text_eng = [
        'Thank you for contacting <b>MKB</b> company! Write your question and contact details, we will definitely',
        'contact you as soon as possible.'
    ]
    text = [
        ' '.join(text_rus),
        '',
        ' '.join(text_eng)
    ]


    await FSMConnection.connection_start.set()
    await message.answer('\n'.join(text))



async def user_start_after_cancel(message: Message):
    text = [
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ª—é–±–æ–º —É–¥–æ–±–Ω–æ–º –í–∞–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä –Ω–æ–º–µ—Ä',
        '—Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–ª–∞–≤–∏—à—É <b>–ø—Ä–æ–ø—É—Å—Ç—Ç—å</b>'
    ]
    await FSMConnection.connection_start.set()
    await message.answer(' '.join(text), reply_markup=inline.miss_keyboard)



async def get_empty_contact(callback: CallbackQuery, state: FSMContext):
    text_to_user = [
        '‚úÖ–¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –í–∞–º –≤ –∫—Ä–∞—Ç—á–∞–π—à–µ–µ –≤—Ä–µ–º—è. –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–ª–∞–≤–∏—à—É',
        '"–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"']
    contact = None
    async with state.proxy() as data:
        data['contact'] = contact
    await FSMConnection.connection_contact.set()
    await callback.message.answer(' '.join(text_to_user), reply_markup=reply.cancel_keyboard)
    await bot.answer_callback_query(callback.id)



async def get_contact(message: Message, state: FSMContext):
    text_to_user = [
        '‚úÖ–¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –∏ –º—ã –í–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º. –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–∏–∞–ª–æ–≥–∞',
                    '–Ω–∞–∂–º–∏—Ç–µ –∫–ª–∞–≤–∏—à—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"'
    ]
    contact = message.text
    async with state.proxy() as data:
        data['contact'] = contact
    await FSMConnection.connection_contact.set()
    await message.answer(' '.join(text_to_user), reply_markup=reply.cancel_keyboard)



async def dialog(message: Message):

    username = message.from_user.username
    user_id = message.from_user.id
    try:
        if len(username) > 0:
            username = '@' + username
    except:
        username = ''
    text_to_admin = [
        '‚úâÔ∏è<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>',
        f'{username} [{user_id}]',
        f'<b><i>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</i></b> {message.text}',
        '',
        '<b>–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"</b>'
    ]
    await bot.send_message(chat_id=admin_group_id, text='\n'.join(text_to_admin))



def register_user(dp: Dispatcher):
    dp.register_message_handler(mute, chat_id=admin_group_id)
    dp.register_message_handler(user_start, commands=["start"], state='*')
    # dp.register_message_handler(user_start_after_cancel, Text(equals='üìõ–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥'), state='*')
    # dp.register_message_handler(get_contact, content_types=['text'], state=FSMConnection.connection_start)
    # dp.register_message_handler(dialog, content_types=['text'], state=FSMConnection.connection_contact)
    #
    # dp.register_callback_query_handler(get_empty_contact, lambda x: x.data == 'miss',
    #                                    state=FSMConnection.connection_start)
    dp.register_message_handler(dialog, content_types='text', state='*')


